{"version":3,"file":"464.bundle.1.0.10.js","mappings":"uKAUOA,eAAeC,IAElB,IACI,MAAMC,QAAiB,IAAAC,qBAAmB,IAAAC,WAAU,gBACpD,IAAIC,EAAc,KAElB,IAAIH,EAASI,QAmCT,YALA,KAAQC,MAAM,CACVC,QAAS,6CAA+CN,EAASM,QACjEC,UAAW,qBACXC,MAAO,CAAC,IAjCM,EAClB,QAAuBR,EAASS,KAAM,YACtC,MAAMC,EAAcC,SAASC,cAAc,wBAC3C,IAAIC,EAAWH,EAAYI,aAAa,YACpCC,EAAiBJ,SAASK,eAAe,mCAAmCC,MAC5EF,GAAkBF,IAClBV,EAAce,EAAYL,EAASE,GACnCI,EAAsBJ,IACtB,QAAc,cAAcZ,IAI5BO,EACAA,EAAYU,iBAAiB,UAAU,SAAUC,KAC7C,QAAiBA,EAAO,qEACxBN,EAAiBJ,SAASK,eAAe,mCAAmCC,QACtDJ,IAClBV,EAAce,EAAYL,EAASE,GACnCI,EAAsBJ,GACtBO,WAAW,KAAW,KAC1B,GACD,MAGH,KAAQC,QAAQ,CACZjB,QAAS,iCACTC,UAAW,yBAGvB,OASM,QAAgBJ,IACtB,UAE0BQ,SAASC,cAAc,0CAC/BQ,iBAAiB,QAAS,KAEhD,CAAE,MAAOf,GACL,KAAQA,MAAM,CACVC,QAAS,6BAA+BD,EAAMC,QAC9CC,UAAW,mBACXC,MAAO,CAAC,GAEhB,CACJ,CASA,SAASU,EAAYL,EAAUW,EAAS,IAsBpC,MAnBkB,CACd,uBAA0B,GAC1B,uBAA0B,GAC1B,gBAAmB,GACnB,gBAAmB,GACnB,iBAAqB,GACrB,iBAAoB,GACpB,2BAA8B,GAC9B,2BAA8B,GAC9B,eAAiB,IAIT,GAAGX,KAAYW,MAMR,IACvB,CAOA,SAASL,EAAsBK,GAEVb,SAASc,iBAAiB,qBAGlCC,SAAQC,IACbA,EAAQC,YAAcJ,CAAQ,GAEtC,C","sources":["webpack://worldify/./src/modules/pages/app/Visa/upload_page.js"],"sourcesContent":["//import { renderDocuments, handleUploadedDocuments, handleFileInputChange, handleUpload }\nimport { getCookie, displayUser, redirectToLogin, resetPassword, emailReset, getAccountSettings, deleteCookie } from \"../../../auth.js\";\nimport { autoSaveFunction, debounce, fillFieldsFromDatabase, setupForm } from \"../../../form_handling\";\nimport { handleDocuments, handleFileInputChange, handleUpload, hideFilePreview, renderDocuments } from \"../../../upload_files.js\";\nimport { logging,downloadAllFilesSubmodule, setQueryParam, getQueryParam, reloadPage } from  \"../../../utils.js\";\n\n/**\n * Renders the upload page for visa modules, including document lists and form settings.\n * Handles dynamic content based on user account settings and interaction with the page.\n */\nexport async function render() {\n\n    try {\n        const response = await getAccountSettings(getCookie('wized_token'));\n        var submoduleId = null;\n\n        if (response.success) {\n            fillFieldsFromDatabase(response.user, 'account_');\n            const formWrapper = document.querySelector('[w-el=\"formWrapper\"]');\n            var visaType = formWrapper.getAttribute('visatype');\n            var relocationCity = document.getElementById('account_relocation_city_germany').value;\n            if (relocationCity && visaType) {\n                submoduleId = getModuleId(visaType,relocationCity);\n                setCityNameInElements(relocationCity);\n                setQueryParam('submoduleId',submoduleId)\n            }\n            \n\n            if (formWrapper) {\n                formWrapper.addEventListener('change', debounce((event) => {\n                    autoSaveFunction(event, `${BASE_URL}/account_settings`);\n                    relocationCity = document.getElementById('account_relocation_city_germany').value;\n                    if (relocationCity && visaType) {\n                        submoduleId = getModuleId(visaType,relocationCity);\n                        setCityNameInElements(relocationCity);\n                        setTimeout(reloadPage,1000);\n                    }\n                }, 500));\n\n            } else {\n                logging.warning({\n                    message: 'render: Form wrapper not found',\n                    eventName: 'render_no_formWrapper',\n                });\n            }\n        } else {\n            logging.error({\n                message: 'render: Failed to fetch account settings: ' + response.message,\n                eventName: 'render_fetch_error',\n                extra: {}\n            });\n            return;\n        }\n        \n        await renderDocuments(submoduleId);\n        handleDocuments();\n\n        const downloadAllButton = document.querySelector('[w-el=\"document_uploaded_downloadAll\"]');\n        downloadAllButton.addEventListener('click', downloadAllFilesSubmodule);\n\n    } catch (error) {\n        logging.error({\n            message: 'Error in render function: ' + error.message,\n            eventName: 'render_exception',\n            extra: {}\n        });\n    }\n}\n\n/**\n * Gets a module ID based on the provided city name and visa type.\n * \n * @param {string} cityName - The name of the city.\n * @param {string} visaType - The type of visa.\n * @returns {string|null} - The module ID if found, or null if not.\n */\nfunction getModuleId(visaType, cityName=\"\") {\n    // Define a map where the keys are a combination of city name and visa type\n    // and the values are corresponding module IDs.\n    const moduleMap = {\n        \"residencePermit_Berlin\": 10,\n        \"residencePermit_Munich\": 11,\n        \"blueCard_Berlin\": 12,\n        \"blueCard_Munich\": 13,\n        \"freelance_Berlin\" : 14,\n        \"freelance_Munich\": 15,\n        \"familyReunification_Berlin\": 18,\n        \"familyReunification_Munich\": 19,\n        \"nationalDVisa_\":20\n    };\n\n    // Construct the key from the function arguments\n    const key = `${visaType}_${cityName}`;\n\n    // Retrieve the module ID from the map\n    const moduleId = moduleMap[key];\n\n    // Return the module ID if found, or null otherwise\n    return moduleId || null;\n}\n\n/**\n * Sets the text of all elements with a specific query selector to a given city name.\n * \n * @param {string} cityName - The city name to set as the text content.\n */\nfunction setCityNameInElements(cityName) {\n    // Find all elements with the query selector '[w-el=\"cityName\"]'\n    const elements = document.querySelectorAll('[w-el=\"cityName\"]');\n\n    // Iterate over each element and set its text content to the provided city name\n    elements.forEach(element => {\n        element.textContent = cityName;\n    });\n}\n\n\n"],"names":["async","render","response","getAccountSettings","getCookie","submoduleId","success","error","message","eventName","extra","user","formWrapper","document","querySelector","visaType","getAttribute","relocationCity","getElementById","value","getModuleId","setCityNameInElements","addEventListener","event","setTimeout","warning","cityName","querySelectorAll","forEach","element","textContent"],"sourceRoot":""}