{"version":3,"file":"27.bundle.1.0.15.js","mappings":"4JASO,SAASA,IACZ,KAGI,QACI,yBACA,KACA,KACAC,EACAC,EACAC,GACA,EAER,CAAE,MAAOC,GAEL,KAAQA,MAAM,CACVC,QAAS,2CAA6CD,EAAMC,QAC5DC,UAAW,2CACXC,MAAO,CAAC,GAEhB,CACJ,CAOA,SAASN,EAAkBO,GACvB,MAAMC,EAAkB,IAAIC,SAE5B,OADAD,EAAgBE,OAAO,QAASH,EAASI,IAAI,4BACtCH,CACX,CAQAI,eAAeX,EAAeY,GAC1B,MAAMC,EAAQD,EAAcF,IAAI,SAIhC,IADmB,kDACHI,KAAKD,GACjB,MAAO,CAAEE,SAAS,EAAOZ,QAAS,yCAGtC,IACI,MAAMa,QAAiB,IAAAC,sBAAqBJ,EAAO,iBAAkB,sDAErE,GAAIG,EAASb,QAAQY,QAMjB,OALA,KAAQG,KAAK,CACTf,QAAS,yCACTC,UAAW,+BACXC,MAAO,CAAC,IAEL,CAAEU,SAAS,EAAMZ,QAAS,+CAC9B,CACH,MAAMgB,EAAeH,EAASb,SAAW,0DAMzC,OALA,KAAQD,MAAM,CACVC,QAAS,uCAAuCgB,IAChDf,UAAW,8BACXC,MAAO,CAAuB,IAE3B,CAAEU,SAAS,EAAOZ,QAASgB,EACtC,CACJ,CAAE,MAAOjB,GAML,OALA,KAAQA,MAAM,CACVC,QAAS,qDAAuDD,EAAMC,QACtEC,UAAW,qCACXC,MAAO,CAAC,IAEL,CAAEU,SAAS,EAAOZ,QAASD,EAAMC,SAAW,gEACvD,CACJ,CAQAQ,eAAeV,EAAee,GAE1B,MAAMI,EAAcC,SAASC,eAAe,0BACtCC,EAAaH,EAAcA,EAAYI,WAAWC,cAAc,yBAA2B,KAG7FT,EAASD,SAAWK,GAAeG,IACnCH,EAAYM,UAAUC,IAAI,QAC1BJ,EAAWK,MAAMC,QAAU,QAEnC,C","sources":["webpack://worldify/./src/modules/pages/account/send_password_reset.js"],"sourcesContent":["import { setCookie, TOKEN_KEY, sendVerificationMail, checkAuthentication } from \"../../auth\";\nimport { setupForm } from \"../../form_handling\";\nimport { logging } from \"../../utils\";\n\n\n/**\n * Initializes and renders the functionality for sending a password reset link.\n * This function sets up the form used for requesting a password reset.\n */\nexport function render() {\n    try {\n        // The setupForm function configures the form behavior,\n        // including transforming form data, submitting it, and handling the response.\n        setupForm(\n            'sendPasswordReset_form', // ID of the form to be setup\n            null,\n            null, \n            transformFormData,        // Function to transform the form data\n            submitFormData,           // Function to submit the form data\n            handleResponse,           // Function to handle the response from submission\n            false                     // Indicates whether the success wrapper should automatically be shown\n        );\n    } catch (error) {\n        // Log any errors encountered during the password reset form setup\n        logging.error({\n            message: \"Error initializing password reset form: \" + error.message,\n            eventName: \"password_reset_form_initialization_error\",\n            extra: {} \n        });\n    }\n}\n/**\n * Transforms the form data for submission.\n * \n * @param {FormData} formData - The original form data.\n * @returns {FormData} - The transformed form data.\n */\nfunction transformFormData(formData) {\n    const transformedData = new FormData();\n    transformedData.append('email', formData.get('sendPasswordReset_email'));\n    return transformedData;\n}\n\n/**\n * Submits the email form data to the server to send a password reset email.\n *\n * @param {FormData} formData - The transformed form data.\n * @returns {Promise<Object>} - The response data from the server.\n */\nasync function submitFormData(inputFormData) {\n    const email = inputFormData.get('email');\n\n    // Validate email address format\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n    if (!emailRegex.test(email)) {\n        return { success: false, message: 'Please provide a valid email address.' };\n    }\n\n    try {\n        const response = await sendVerificationMail(email, \"password_reset\", DOMAIN_URL + \"/account/reset-password\");\n\n        if (response.message.success) {\n            logging.info({\n                message: \"Password reset email sent successfully\",\n                eventName: \"password_reset_email_success\",\n                extra: {}\n            });\n            return { success: true, message: \"Sending password reset link was successful.\" };\n        } else {\n            const errorMessage = response.message || 'Sending password reset link failed due to unknown error';\n            logging.error({\n                message: `Sending password reset link failed: ${errorMessage}`,\n                eventName: \"password_reset_email_failed\",\n                extra: { /* response: data */ }\n            });\n            return { success: false, message: errorMessage };\n        }\n    } catch (error) {\n        logging.error({\n            message: \"Error during sending password reset link process: \" + error.message,\n            eventName: \"password_reset_email_process_error\",\n            extra: {}\n        });\n        return { success: false, message: error.message || \"Error occurred during the sending password reset link process\" };\n    }\n}\n\n/**\n * Handles the response after submitting the send password reset form.\n * This function is responsible for updating the UI based on the server's response.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleResponse(response) {\n    // Access the form and its corresponding success message container\n    const formElement = document.getElementById('sendPasswordReset_form');\n    const successDiv = formElement ? formElement.parentNode.querySelector('[w-el=\"form_success\"]') : null;\n\n    // Display the success message and hide the form if the submission was successful\n    if (response.success && formElement && successDiv) {\n        formElement.classList.add('hide');\n        successDiv.style.display = 'block';\n    }\n}"],"names":["render","transformFormData","submitFormData","handleResponse","error","message","eventName","extra","formData","transformedData","FormData","append","get","async","inputFormData","email","test","success","response","sendVerificationMail","info","errorMessage","formElement","document","getElementById","successDiv","parentNode","querySelector","classList","add","style","display"],"sourceRoot":""}