{"version":3,"file":"517.bundle.1.0.11.js","mappings":"8JAQO,SAASA,IACZ,KAAQC,KAAK,CAAEC,QAAS,0BAA2BC,UAAW,8BAE1DC,OAAOC,SACPD,OAAOC,QAAQC,MAAK,KAChB,KACI,QAAU,aAAcC,EAAwBC,EAAqBC,GAAoB,EAC7F,CAAE,MAAOC,GACL,KAAQA,MAAM,CACVR,QAAS,kCAAoCQ,EAAMR,QACnDC,UAAW,6BACXQ,MAAO,CAAC,GAEhB,IAGZ,CAQA,SAASJ,EAAuBK,GAC5B,MAAMC,EAAkB,IAAIC,SAG5B,OAFAD,EAAgBE,OAAO,QAAQH,EAASI,IAAI,UAC5CH,EAAgBE,OAAO,WAAWH,EAASI,IAAI,aACxCH,CACX,CAQAI,eAAeT,EAAoBU,GAC/B,MAAMC,EAAQD,EAAcF,IAAI,SAC1BI,EAAWF,EAAcF,IAAI,YAGnC,IAAKG,IAAUC,EACX,MAAO,CAAEC,SAAS,EAAOnB,QAAS,oCAGtC,IAEI,MAAMoB,QAAiBC,MAAM,6DAA0B,CACnDC,OAAQ,OACRC,KAAMP,EACNQ,QAAS,CAAC,IAIRC,QAAaL,EAASM,OAG5B,GAAIN,EAASO,GAMT,OALA,KAAQ5B,KAAK,CACTC,QAAS,2BACTC,UAAW,gBACXQ,MAAO,CAAC,IAEL,CAAEU,SAAS,EAAMnB,QAAS,oBAAqB4B,UAAWH,EAAKG,WACnE,CACH,MAAMC,EAAeJ,EAAKzB,SAAW,oCAMrC,OALA,KAAQQ,MAAM,CACVR,QAAS,yBAAyB6B,IAClC5B,UAAW,eACXQ,MAAO,CAAqB,IAEzB,CAAEU,SAAS,EAAOnB,QAAS6B,EACtC,CACJ,CAAE,MAAOrB,GAML,OALA,KAAQA,MAAM,CACVR,QAAS,+BAAiCQ,EAAMR,QAChDC,UAAW,kBACXQ,MAAO,CAAC,IAEL,CAAEU,SAAS,EAAOnB,QAASQ,EAAMR,SAAW,0CACvD,CACJ,CAOAe,eAAeR,EAAoBa,GAC3BA,EAASD,UACT,IAAAW,WAAU,EAAAC,UAAWX,EAASQ,YAC9B,IAAAI,uBACA,KAAQjC,KAAK,CACTC,QAAS,8BACTC,UAAW,wBAGf,KAAQgC,QAAQ,CACZjC,QAAS,iBAAmBoB,EAASpB,QACrCC,UAAW,oBACXQ,MAAO,CAAC,GAIpB,C","sources":["webpack://worldify/./src/modules/pages/account/login.js"],"sourcesContent":["import { getCookie, setCookie, redirectToDashboard, TOKEN_KEY } from \"../../auth\";\nimport { setupForm } from \"../../form_handling\";\nimport { logging } from \"../../utils\";\n\n/**\n * Renders and sets up the login functionality.\n * This function is called to initialize the login page.\n */\nexport function render() {\n    logging.info({ message: \"Initializing login page\", eventName: \"login_page_initialization\" });\n\n    if (window.Webflow) {\n        window.Webflow.push(() => {\n            try {\n                setupForm('login_form', transformLoginFormData, submitLoginFormData, handleLoginResponse,false);\n            } catch (error) {\n                logging.error({\n                    message: \"Error initializing login form: \" + error.message,\n                    eventName: \"login_initialization_error\",\n                    extra: {}\n                });\n            }\n        });\n    }\n}\n\n/**\n * Transforms the login form data for submission.\n * \n * @param {FormData} formData - The original form data.\n * @returns {FormData} - The transformed form data.\n */\nfunction transformLoginFormData(formData) {\n    const transformedData = new FormData();\n    transformedData.append('email',formData.get('email'));\n    transformedData.append('password',formData.get('password'));\n    return transformedData;\n}\n\n/**\n * Submits the login form data to the server.\n * \n * @param {FormData} inputFormData - The transformed form data for login.\n * @returns {Promise<Object>} - An object containing the success status and message.\n */\nasync function submitLoginFormData(inputFormData) {\n    const email = inputFormData.get('email');\n    const password = inputFormData.get('password');\n\n    // Validate email and password (optional, based on requirements)\n    if (!email || !password) {\n        return { success: false, message: 'Email and password are required.' };\n    }\n\n    try {\n        // Send the POST request to the server\n        const response = await fetch(`${AUTH_URL}/auth/login`, {\n            method: 'POST',\n            body: inputFormData,\n            headers: {}\n        });\n\n        // Parse the response\n        const data = await response.json();\n\n        // Check the response status\n        if (response.ok) {\n            logging.info({\n                message: \"Login request successful\",\n                eventName: \"login_success\",\n                extra: {}\n            });\n            return { success: true, message: \"Login successful.\", authToken: data.authToken };\n        } else {\n            const errorMessage = data.message || 'Login failed due to unknown error';\n            logging.error({\n                message: `Login request failed: ${errorMessage}`,\n                eventName: \"login_failed\",\n                extra: { /*response: data*/ }\n            });\n            return { success: false, message: errorMessage };\n        }\n    } catch (error) {\n        logging.error({\n            message: \"Error during login process: \" + error.message,\n            eventName: \"login_exception\",\n            extra: {}\n        });\n        return { success: false, message: error.message || \"Error occurred during the login process\" };\n    }\n}\n\n/**\n * Handles the response received after login form submission.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleLoginResponse(response) {\n    if (response.success) {\n        setCookie(TOKEN_KEY, response.authToken);\n        redirectToDashboard();\n        logging.info({\n            message: \"User logged in successfully\",\n            eventName: \"user_login_success\"\n        });\n    } else {\n        logging.warning({\n            message: \"Login failed: \" + response.message,\n            eventName: \"user_login_failed\",\n            extra: {}\n        });\n        // Handle displaying the error message on the login form\n    }\n}"],"names":["render","info","message","eventName","window","Webflow","push","transformLoginFormData","submitLoginFormData","handleLoginResponse","error","extra","formData","transformedData","FormData","append","get","async","inputFormData","email","password","success","response","fetch","method","body","headers","data","json","ok","authToken","errorMessage","setCookie","TOKEN_KEY","redirectToDashboard","warning"],"sourceRoot":""}