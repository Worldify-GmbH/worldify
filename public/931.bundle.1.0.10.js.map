{"version":3,"file":"931.bundle.1.0.10.js","mappings":"8JAOOA,eAAeC,IAClB,KACI,UACA,MAAMC,QAAiB,IAAAC,qBAAmB,IAAAC,WAAU,gBAEpD,IAAIF,EAASG,QAkBT,YALA,KAAQC,MAAM,CACVC,QAAS,6CAA+CL,EAASK,QACjEC,UAAW,qBACXC,MAAO,CAAC,IAhBM,EAClB,QAAuBP,EAASQ,KAAM,YACtC,MAAMC,EAAcC,SAASC,cAAc,wBAEvCF,EACAA,EAAYG,iBAAiB,UAAU,SAAUC,IAAU,QAAiBA,EAAO,qEAAiC,MAEpH,KAAQC,QAAQ,CACZT,QAAS,iCACTC,UAAW,yBAGvB,EASsB,QAAU,sBAAuBS,EAAwB,EAAAC,WAAWC,IACjE,QAAU,0BAA2BC,EAA2B,EAAAC,cAAcC,EAE3G,CAAE,MAAOhB,GACL,KAAQA,MAAM,CACVC,QAAS,6BAA+BD,EAAMC,QAC9CC,UAAW,mBACXC,MAAO,CAAC,GAEhB,CACJ,CAEAT,eAAemB,EAAuBjB,GAElC,MAAMqB,EAAcX,SAASY,eAAe,uBAEtCC,EAAaF,EAAYG,WAAWb,cAAc,yBAGpDX,EAASG,UACTkB,EAAYI,QACZJ,EAAYK,UAAUC,IAAI,QACtBJ,EAAWK,MAAMC,QAAU,QAC3BC,YAAW,KACPP,EAAWK,MAAMC,QAAU,OAC3BR,EAAYK,UAAUK,OAAO,SAC7B,IAAAC,cAAa,gBACb,IAAAC,kBAAiB,GAClB,KAEf,CAEAnC,eAAesB,EAA0BpB,GAErC,MAAMqB,EAAcX,SAASY,eAAe,2BAEtCC,EAAaF,EAAYG,WAAWb,cAAc,yBAGpDX,EAASG,UACTkB,EAAYI,QACZJ,EAAYK,UAAUC,IAAI,QACtBJ,EAAWK,MAAMC,QAAU,QAC3BC,YAAW,KACPP,EAAWK,MAAMC,QAAU,OAC3BR,EAAYK,UAAUK,OAAO,SAC7B,IAAAC,cAAa,gBACb,IAAAC,kBAAiB,GAClB,KAEf,CAQA,SAASf,EAA0BgB,GAE/B,MAAMC,EAAWD,EAASE,IAAI,oBACxBC,EAAkBH,EAASE,IAAI,4BAG/BE,EAAiB,IAAIC,SAG3B,OAFAD,EAAeE,OAAO,WAAWL,GACjCG,EAAeE,OAAO,kBAAkBH,GACjCC,CACX,CAEA,SAASvB,EAAuBmB,GAE5B,MAAMO,EAAQP,EAASE,IAAI,gBACrBM,EAAeR,EAASE,IAAI,wBAG5BE,EAAiB,IAAIC,SAG3B,OAFAD,EAAeE,OAAO,QAAQC,GAC9BH,EAAeE,OAAO,eAAeE,GAC9BJ,CACX,C","sources":["webpack://worldify/./src/modules/pages/account/account_settings.js"],"sourcesContent":["import { getCookie, displayUser, redirectToLogin, resetPassword, emailReset, getAccountSettings, deleteCookie } from \"../../auth\";\nimport { autoSaveFunction, debounce, fillFieldsFromDatabase, setupForm } from \"../../form_handling\";\nimport { attachDatePicker, logging } from \"../../utils\";\n\n/**\n * Renders the page by fetching account settings and setting up forms for account management.\n */\nexport async function render() {\n    try {\n        attachDatePicker();\n        const response = await getAccountSettings(getCookie('wized_token'));\n\n        if (response.success) {\n            fillFieldsFromDatabase(response.user, 'account_');\n            const formWrapper = document.querySelector('[w-el=\"formWrapper\"]');\n\n            if (formWrapper) {\n                formWrapper.addEventListener('change', debounce((event) => autoSaveFunction(event, `${BASE_URL}/account_settings`), 500));\n            } else {\n                logging.warning({\n                    message: 'render: Form wrapper not found',\n                    eventName: 'render_no_formWrapper',\n                });\n            }\n        } else {\n            logging.error({\n                message: 'render: Failed to fetch account settings: ' + response.message,\n                eventName: 'render_fetch_error',\n                extra: {}\n            });\n            return;\n        }\n\n        const emailResponse = setupForm('account_change_mail', transformEmailFormData, emailReset,logoutAndRedirectEmail);      \n        const passwordResponse = setupForm('account_change_password', transformPasswordFormData, resetPassword,logoutAndRedirectPassword);\n\n    } catch (error) {\n        logging.error({\n            message: 'Error in render function: ' + error.message,\n            eventName: 'render_exception',\n            extra: {}\n        });\n    }\n}\n\nasync function logoutAndRedirectEmail(response){\n\n    const formElement = document.getElementById('account_change_mail');\n\n    const successDiv = formElement.parentNode.querySelector('[w-el=\"form_success\"]');\n\n    // Handling the response specifically for email reset\n    if (response.success) {\n        formElement.reset();\n        formElement.classList.add('hide');\n            successDiv.style.display = 'block';\n            setTimeout(() => {\n                successDiv.style.display = 'none';\n                formElement.classList.remove('hide');\n                deleteCookie('wized_token');\n                redirectToLogin();\n            }, 5000);\n    }\n}\n\nasync function logoutAndRedirectPassword(response){\n\n    const formElement = document.getElementById('account_change_password');\n\n    const successDiv = formElement.parentNode.querySelector('[w-el=\"form_success\"]');\n\n    // Handling the response specifically for email reset\n    if (response.success) {\n        formElement.reset();\n        formElement.classList.add('hide');\n            successDiv.style.display = 'block';\n            setTimeout(() => {\n                successDiv.style.display = 'none';\n                formElement.classList.remove('hide');\n                deleteCookie('wized_token');\n                redirectToLogin();\n            }, 5000);\n    }\n}\n\n/**\n * Transforms the email form data for submission.\n * \n * @param {FormData} formData - The original form data.\n * @returns {FormData} - Transformed formData with email and confirmEmail.\n */\nfunction transformPasswordFormData(formData) {\n    // Extract email and confirmation email from the form data\n    const password = formData.get('account_password');\n    const confirmPassword = formData.get('account_password_confirm');\n\n    // Return the transformed data\n    const resultFormData = new FormData();\n    resultFormData.append('password',password);\n    resultFormData.append('confirmPassword',confirmPassword);\n    return resultFormData;\n}\n\nfunction transformEmailFormData(formData) {\n    // Extract email and confirmation email from the form data\n    const email = formData.get('account_mail');\n    const confirmEmail = formData.get('account_mail_confirm');\n\n    // Return the transformed data\n    const resultFormData = new FormData();\n    resultFormData.append('email',email);\n    resultFormData.append('confirmEmail',confirmEmail)\n    return resultFormData;\n}"],"names":["async","render","response","getAccountSettings","getCookie","success","error","message","eventName","extra","user","formWrapper","document","querySelector","addEventListener","event","warning","transformEmailFormData","emailReset","logoutAndRedirectEmail","transformPasswordFormData","resetPassword","logoutAndRedirectPassword","formElement","getElementById","successDiv","parentNode","reset","classList","add","style","display","setTimeout","remove","deleteCookie","redirectToLogin","formData","password","get","confirmPassword","resultFormData","FormData","append","email","confirmEmail"],"sourceRoot":""}