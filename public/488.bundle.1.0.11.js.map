{"version":3,"file":"488.bundle.1.0.11.js","mappings":"8KA4CAA,eAAeC,EAAcC,EAAYC,EAAYC,GAEjD,MAAMC,EAAiB,UAAUH,EAAW,KAEtCI,EAAU,CACZC,UAAWC,SAASC,cAAcJ,GAClCD,OAAQA,EACRM,aAAa,EACbC,YAAY,EACZC,QAAS,EACTC,OAAS,IACTC,SAAUd,OAASe,SAAQC,iBACvBC,QAAQC,IAAI,QAAQH,6BAAkCC,KAGtD,MAAMG,QApDlBnB,eAAuCoB,EAAQC,GAE3C,MAAMC,GAAQ,IAAAC,WAAU,eAClBC,EAAW,IAAIC,SAErBD,EAASE,OAAO,UAAUN,GAC1BI,EAASE,OAAO,cAAcL,GAE9B,IAEI,MAAMM,QAAiBC,MAAM,wFAAqD,CAC9EC,OAAQ,OACRC,QAAS,CACL,cAAiB,UAAYR,GAEjCS,KAAMP,IAIJQ,QAAaL,EAASM,OAG5B,OAAIN,EAASO,GACFF,GAIPf,QAAQkB,MAAM,uCAAwCH,EAAKI,SAAW,iBAC/D,KAEf,CAAE,MAAOD,GAGL,OADAlB,QAAQkB,MAAM,yBAA0BA,IACjC,CACX,CACJ,CAiBuCE,CAAwBtB,EAAOC,GAC1DC,QAAQC,IAAIC,EAAa,IAIjC,IAAAmB,cAAanC,EAAaG,EAE9B,CACO,SAASiC,IAEZ,IACI,MAAMC,EAAsBhC,SAASC,cAAc,gCAC7CgC,EAAoBjC,SAASC,cAAc,8BAC3CiC,EAAgBlC,SAASC,cAAc,0BAG7CD,SAASC,cAAc,wBAAwBkC,iBAAiB,SAAS3C,iBAErEiB,QAAQC,IAAI,wCACZsB,EAAoBI,UAAUC,IAAI,QAClCJ,EAAkBG,UAAUE,OAAO,SAEnC,UACA,MAAMnB,QAAiB,IAAAoB,qBAAmB,IAAAxB,WAAU,gBAEpD,GAAII,EAASqB,QAAS,EAClB,QAAuBrB,EAASsB,KAAM,YACtC,MAAMC,EAAc1C,SAASC,cAAc,wBAEvCyC,EACAA,EAAYP,iBAAiB,UAAU,SAAUQ,IAAU,QAAiBA,EAAO,qEAAiC,MAEpHC,QAAQC,QAAQ,CACZjB,QAAS,iCACTkB,UAAW,yBAGvB,MACIF,QAAQjB,MAAM,CACVC,QAAS,6CAA+CT,EAASS,QACjEkB,UAAW,qBACXC,MAAO,CAAC,GAIpB,IACA/C,SAASC,cAAc,0BAA0BkC,iBAAiB,SAAS3C,iBAEvE,MAAM2B,QAAiB,IAAAoB,qBAAmB,IAAAxB,WAAU,gBACpDN,QAAQC,IAAIS,GACZV,QAAQC,IAAI,0BACZuB,EAAkBG,UAAUC,IAAI,QAChCH,EAAcE,UAAUE,OAAO,QAC/B,MAAMU,EAAc,CAChB,YAAc7B,EAASsB,KAAKQ,YAC5B,cAAgB9B,EAASsB,KAAKS,cAC9B,kBAAoB/B,EAASsB,KAAKU,kBAClC,gBAAkBhC,EAASsB,KAAKW,gBAChC,WAAajC,EAASsB,KAAKY,WAC3B,gCAAmClC,EAASsB,KAAKY,WAAa,IAAIC,KAAKnC,EAASsB,KAAKY,YAAc,IAAIC,KAAK,cAAgB,YAE1H7D,EAAc,gBAAgB,WAAWuD,EACnD,IAIAhD,SAASC,cAAc,uBAAuBkC,iBAAiB,SAAS3C,iBAEpEiB,QAAQC,IAAI,8CACZsB,EAAoBI,UAAUC,IAAI,QAClCH,EAAcE,UAAUE,OAAO,cACzB7C,EAAc,gBAAgB,WAAW,CAAC,EACpD,GAGJ,CAAE,MAAOkC,GAET,CACJ,C","sources":["webpack://worldify/./src/modules/pages/app/Health_Insurance/health_insurance_finder.js"],"sourcesContent":["import { createWidget } from '@typeform/embed';\nimport '@typeform/embed/build/css/widget.css';\nimport { attachDatePicker, get_tf_result } from '../../../utils';\nimport { getAccountSettings, getCookie } from '../../../auth';\nimport { autoSaveFunction, debounce, fillFieldsFromDatabase } from '../../../form_handling';\n\n\nasync function submit_health_insurance(form_id,response_id) {\n\n    const token = getCookie('wized_token');\n    const formData = new FormData ();\n\n    formData.append('form_id',form_id);\n    formData.append('response_id',response_id);\n\n    try {\n        // Make a GET request to the authentication endpoint with the token in the headers.\n        const response = await fetch(BASE_URL + '/typeform_submissions/health-insurance', {\n            method: 'POST',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            body: formData\n        });\n        \n        // Parse the response to JSON.\n        const data = await response.json();\n\n        // Check if the response status indicates success (e.g., 200 OK).\n        if (response.ok) {\n            return data;\n        } else {\n            // Log an error message if the token verification failed. \n            // Use the provided error message from the response or a default \"Unknown error\" message.\n            console.error('Retrival of Typform Response failed:', data.message || 'Unknown error');\n            return null;\n        }\n    } catch (error) {\n        // Log any errors that occurred during the token verification process.\n        console.error('Error verifying token:', error);\n        return false;\n    }\n}\n\nasync function setupTypeform(identifier, typeform_id,hidden) {\n\n    const query_selector = `[w-el=\"`+identifier+`\"]`\n\n    const options = {\n        container: document.querySelector(query_selector), \n        hidden: hidden,\n        hideHeaders: true,\n        hideFooter: true,\n        opacity: 0,\n        height : 600,\n        onSubmit: async ({ formId, responseId }) =>  {\n            console.log(`Form ${formId} submitted, response id: ${responseId}`)\n            //const response = await get_tf_result(formId,responseId);\n            //console.log(response);\n            const updated_user = await submit_health_insurance(formId,responseId);\n            console.log(updated_user);\n          },\n    }\n\n    createWidget(typeform_id, options)\n\n}\nexport function render () {\n\n    try {\n        const slide1_externalData = document.querySelector('[w-el=\"slide1_externalData\"]');\n        const slide2_reviewData = document.querySelector('[w-el=\"slide2_reviewData\"]');\n        const typeform_quiz = document.querySelector('[w-el=\"typeform_quiz\"]');\n\n\n        document.querySelector('[w-el=\"prefill_yes\"]').addEventListener('click', async function() {\n            // Code to handle \"Yes\" response\n            console.log(\"User consented to use external data.\");\n            slide1_externalData.classList.add('hide');\n            slide2_reviewData.classList.remove('hide');\n\n            attachDatePicker();\n            const response = await getAccountSettings(getCookie('wized_token'));\n\n            if (response.success) {\n                fillFieldsFromDatabase(response.user, 'account_');\n                const formWrapper = document.querySelector('[w-el=\"formWrapper\"]');\n\n                if (formWrapper) {\n                    formWrapper.addEventListener('change', debounce((event) => autoSaveFunction(event, `${BASE_URL}/account_settings`), 500));\n                } else {\n                    logging.warning({\n                        message: 'render: Form wrapper not found',\n                        eventName: 'render_no_formWrapper',\n                    });\n                }\n            } else {\n                logging.error({\n                    message: 'render: Failed to fetch account settings: ' + response.message,\n                    eventName: 'render_fetch_error',\n                    extra: {}\n                });\n                return;\n            }\n        });\n        document.querySelector('[w-el=\"proceedToQuiz\"]').addEventListener('click', async function() {\n            // Code to handle \"No\" response\n            const response = await getAccountSettings(getCookie('wized_token'));\n            console.log(response)\n            console.log(\"User proceeds to quiz.\");\n            slide2_reviewData.classList.add('hide');\n            typeform_quiz.classList.remove('hide');\n            const hidden_data = {\n                'citizenship':response.user.citizenship,\n                'citizenship_2':response.user.citizenship_2,\n                'residence_country':response.user.residence_country,\n                'relocation_date':response.user.relocation_date,\n                'birth_date':response.user.birth_date,\n                'birth_date_is_before_1969_01_01': response.user.birth_date ? new Date(response.user.birth_date) < new Date('1969-01-01') : null\n            }\n            await setupTypeform(\"typeform_quiz\",\"siLiU31K\",hidden_data);\n        });\n\n\n        \n        document.querySelector('[w-el=\"prefill_no\"]').addEventListener('click', async function() {\n            // Code to handle \"No\" response\n            console.log(\"User did not consent to use external data.\");\n            slide1_externalData.classList.add('hide');\n            typeform_quiz.classList.remove('hide');\n            await setupTypeform(\"typeform_quiz\",\"siLiU31K\",{});\n        });\n\n\n    } catch (error) {\n        \n    }\n}"],"names":["async","setupTypeform","identifier","typeform_id","hidden","query_selector","options","container","document","querySelector","hideHeaders","hideFooter","opacity","height","onSubmit","formId","responseId","console","log","updated_user","form_id","response_id","token","getCookie","formData","FormData","append","response","fetch","method","headers","body","data","json","ok","error","message","submit_health_insurance","createWidget","render","slide1_externalData","slide2_reviewData","typeform_quiz","addEventListener","classList","add","remove","getAccountSettings","success","user","formWrapper","event","logging","warning","eventName","extra","hidden_data","citizenship","citizenship_2","residence_country","relocation_date","birth_date","Date"],"sourceRoot":""}