{"version":3,"file":"265.bundle.1.0.12.js","mappings":"8JAQOA,eAAeC,IAClB,MAAMC,EAAgBC,SAASC,cAAc,iCACvCC,EAAeF,SAASC,cAAc,gCAE5C,IAGkB,QADA,IAAAE,WAAU,EAAAC,aAEpB,IAAAC,cAAa,EAAAD,WAIjB,MAAME,GAAa,IAAAC,eAAc,SACjC,IAAKD,EAGD,YADAE,EAAyBN,EAAc,IAAM,EAAAO,2BAIjD,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,cAAeN,GAE/B,IAEI,MAAMO,QAAiBC,MAAM,mEAAgC,CACzDC,OAAQ,OACRC,KAAMN,IAGJO,QAAaJ,EAASK,OAExBL,EAASM,KAET,IAAAC,WAAU,EAAAhB,UAAWa,UACW,IAAAI,wBAEVC,KAAKC,GAEvBf,EAAyBT,EAAe,KAGxCS,EAAyBN,EAAc,IAAM,EAAAO,4BAIjDD,EAAyBN,EAAc,IAAM,EAAAO,0BAErD,CAAE,MAAOe,GACL,KAAQA,MAAM,CACVC,QAAS,sCAAsCD,EAAMC,UACrDC,UAAW,+BACXC,MAAO,CAAC,GAEhB,CACJ,CAAE,MAAOH,GACL,KAAQA,MAAM,CACVC,QAAS,oDAAoDD,EAAMC,UACnEC,UAAW,iCACXC,MAAO,CAAC,GAEhB,EAGA,QAAU,qBAAsBC,EAAmB,EAAAC,cAAeC,GAAgB,EACtF,CASA,SAAStB,EAAyBuB,EAAQC,EAASC,EAAS,MACxDF,EAAOG,UAAUC,OAAO,QACxBC,YAAW,KACPL,EAAOG,UAAUG,IAAI,QACjBJ,GAAQA,GAAQ,GACrBD,EACP,CAUA,SAASJ,EAAkBlB,GACvB,MAAM4B,EAAkB,IAAI3B,SAItB4B,EAAW7B,EAAS8B,IAAI,0BACxBC,EAAkB/B,EAAS8B,IAAI,iCAKrC,OAHAF,EAAgB1B,OAAO,WAAY2B,GACnCD,EAAgB1B,OAAO,kBAAmB6B,GAEnCH,CACX,CASAzC,eAAeiC,EAAejB,GAC1B,MAAM6B,EAAc1C,SAAS2C,eAAe,sBACtCC,EAAaF,EAAcA,EAAYG,WAAW5C,cAAc,yBAA2B,KAE7FY,EAASiC,QACLJ,GAAeE,IAEfF,EAAYR,UAAUG,IAAI,QAC1BO,EAAWG,MAAMC,QAAU,QAC3B,KAAQC,KAAK,CACTxB,QAAS,4BACTC,UAAW,4BAInB,KAAQF,MAAM,CACVC,QAAS,2BAA6BZ,EAASY,SAAW,iBAC1DC,UAAW,yBACXC,MAAO,CAAC,GAIpB,C","sources":["webpack://worldify/./src/modules/pages/account/reset_password.js"],"sourcesContent":["import { getCookie, getQueryParam, checkAuthentication,TOKEN_KEY, deleteCookie, redirectSendPasswordReset, setCookie, resetPassword, redirectToLogin} from \"../../auth\";\nimport { setupForm } from \"../../form_handling\";\nimport { attachDatePicker, logging } from \"../../utils\";\n\n/**\n * Renders the reset password page and initializes functionality.\n * This function verifies the magic token for password reset and sets up the form.\n */\nexport async function render() {\n    const successBanner = document.querySelector('[w-el=\"verification_success\"]');\n    const failedBanner = document.querySelector('[w-el=\"verification_failed\"]');\n\n    try {\n        // Delete existing authentication token if present\n        const token = getCookie(TOKEN_KEY);\n        if (token !== null) {\n            deleteCookie(TOKEN_KEY);\n        }\n\n        // Get the magic token from the URL query parameters\n        const magicToken = getQueryParam('token');\n        if (!magicToken) {\n            // Show error banner if no magic token is found\n            displayBannerWithTimeout(failedBanner, 6000, redirectSendPasswordReset);\n            return;\n        }\n\n        const formData = new FormData();\n        formData.append('magic_token', magicToken);\n\n        try {\n            // Send request to validate the magic token\n            const response = await fetch(`${AUTH_URL}/auth/magic-login`, {\n                method: 'POST',\n                body: formData\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                // Set new token and check user authentication\n                setCookie(TOKEN_KEY, data);\n                const authCheckResponse = await checkAuthentication();\n\n                if (authCheckResponse.user.id) {\n                    // Display success banner if user is authenticated\n                    displayBannerWithTimeout(successBanner, 10000);\n                } else {\n                    // Redirect if authentication fails\n                    displayBannerWithTimeout(failedBanner, 6000, redirectSendPasswordReset);\n                }\n            } else {\n                // Show error banner if response is not OK\n                displayBannerWithTimeout(failedBanner, 6000, redirectSendPasswordReset);\n            }\n        } catch (error) {\n            logging.error({\n                message: `Error with magic token validation: ${error.message}`,\n                eventName: \"magic_token_validation_error\",\n                extra: {}\n            });\n        }\n    } catch (error) {\n        logging.error({\n            message: `Error during reset password page initialization: ${error.message}`,\n            eventName: \"reset_password_page_init_error\",\n            extra: {}\n        });\n    }\n\n    // Setup reset password form\n    setupForm('resetPassword_form', transformFormData, resetPassword, handleResponse, false);\n}\n\n/**\n * Displays a banner for a specified duration, then performs an action.\n * \n * @param {Element} banner - The banner element to display.\n * @param {number} timeout - The duration in milliseconds to display the banner.\n * @param {Function} [action] - The action to perform after the timeout.\n */\nfunction displayBannerWithTimeout(banner, timeout, action = null) {\n    banner.classList.remove('hide');\n    setTimeout(() => {\n        banner.classList.add('hide');\n        if (action) action();\n    }, timeout);\n}\n\n/**\n * Transforms the reset password form data for submission.\n * This function adjusts the keys for the password and confirm password fields\n * and constructs a new FormData object with the transformed data.\n * \n * @param {FormData} formData - The original form data from the reset password form.\n * @returns {FormData} - The transformed FormData object suitable for submission.\n */\nfunction transformFormData(formData) {\n    const transformedData = new FormData();\n\n    // Extract and append the password and confirm password fields\n    // from the original form data to the transformed form data.\n    const password = formData.get('resetPassword_password');\n    const confirmPassword = formData.get('resetPassword_confirmPassword');\n\n    transformedData.append('password', password);\n    transformedData.append('confirmPassword', confirmPassword);\n\n    return transformedData;\n}\n\n\n/**\n * Handles the response received after the reset password form submission.\n * This function updates the UI based on the success or failure of the password reset process.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleResponse(response) {\n    const formElement = document.getElementById('resetPassword_form');\n    const successDiv = formElement ? formElement.parentNode.querySelector('[w-el=\"form_success\"]') : null;\n\n    if (response.success) {\n        if (formElement && successDiv) {\n            // Hide the form and show the success message\n            formElement.classList.add('hide');\n            successDiv.style.display = 'block';\n            logging.info({\n                message: \"Reset password successful\",\n                eventName: \"reset_password_success\"\n            });\n        }\n    } else {\n        logging.error({\n            message: \"Reset password failed: \" + (response.message || \"Unknown error\"),\n            eventName: \"reset_password_failure\",\n            extra: {}\n        });\n        // Optionally, handle the display of an error message to the user\n    }\n}"],"names":["async","render","successBanner","document","querySelector","failedBanner","getCookie","TOKEN_KEY","deleteCookie","magicToken","getQueryParam","displayBannerWithTimeout","redirectSendPasswordReset","formData","FormData","append","response","fetch","method","body","data","json","ok","setCookie","checkAuthentication","user","id","error","message","eventName","extra","transformFormData","resetPassword","handleResponse","banner","timeout","action","classList","remove","setTimeout","add","transformedData","password","get","confirmPassword","formElement","getElementById","successDiv","parentNode","success","style","display","info"],"sourceRoot":""}