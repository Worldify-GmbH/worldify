{"version":3,"file":"66.bundle.1.0.13.js","mappings":"mKA2HO,SAASA,IAEZ,MAAMC,EAAU,CACZC,UAAWC,SAASC,cAAc,0BAClCC,aAAa,EACbC,YAAY,EACZC,QAAS,EACTC,OAAS,IACTC,SAAUC,OAASC,SAAQC,iBACvBC,QAAQC,IAAI,QAAQH,6BAAkCC,KACtD,MAAMG,QAAiB,QAAcJ,EAAOC,GAC5CC,QAAQC,IAAIC,GACZ,MAAMC,QAlIlBN,eAAuCK,GAEnC,MAAME,GAAQ,IAAAC,WAAU,eAClBC,EAAW,IAAIC,SAErBD,EAASE,OAAO,iBAAiB,GAEjCN,EAASO,UAAUC,SAAQC,IACF,oBAAjBA,EAASC,IACTN,EAASE,OAAO,wBAAwBG,EAASE,QACzB,sBAAjBF,EAASC,IAChBN,EAASE,OAAO,gCAAgCG,EAASE,QACjC,qBAAjBF,EAASC,KAChBN,EAASE,OAAO,iCAAiCG,EAASE,OAC9D,IAGJX,EAASY,QAAQJ,SAAQK,IAErB,OADAf,QAAQC,IAAIc,EAAOC,MAAMC,IAAKF,EAAOG,MAC7BH,EAAOC,MAAMC,KACjB,IAAK,qBACDX,EAASE,OAAO,cAAcO,EAAOG,MACrC,MACJ,IAAK,uBACDZ,EAASE,OAAO,gBAAgBO,EAAOG,MACvC,MACJ,IAAK,oBACDZ,EAASE,OAAO,aAAaO,EAAOI,MACpC,MACJ,IAAK,2BACDb,EAASE,OAAO,oBAAoBO,EAAOG,MAC3C,MACJ,IAAK,yBAGL,IAAK,2BACDZ,EAASE,OAAO,kBAAkBO,EAAOI,MACzC,MACJ,IAAK,iCAC0B,OAAvBJ,EAAOK,OAAOC,MACdf,EAASE,OAAO,0BAA0B,eACnCO,EAAOK,OAAOC,MAIzB,MACJ,IAAK,kCAC0B,0DAAvBN,EAAOK,OAAOC,MACdf,EAASE,OAAO,0BAA0B,gCACZ,kCAAvBO,EAAOK,OAAOC,MACrBf,EAASE,OAAO,0BAA0B,4BACZ,2DAAvBO,EAAOK,OAAOC,MACrBf,EAASE,OAAO,0BAA0B,iCACZ,mCAAvBO,EAAOK,OAAOC,OACrBf,EAASE,OAAO,0BAA0B,6BAE9C,MACJ,IAAK,oBAYL,IAAK,6BAGL,IAAK,uBAGL,IAAK,yBAGL,QACI,MAnBJ,IAAK,wBAC0B,oCAAvBO,EAAOK,OAAOC,MACdf,EAASE,OAAO,iBAAiB,6BACH,yCAAvBO,EAAOK,OAAOC,MACrBf,EAASE,OAAO,iBAAiB,0BACH,gCAAvBO,EAAOK,OAAOC,OACrBf,EAASE,OAAO,iBAAiB,SAc7C,IAGJ,IAAK,MAAMc,KAAQhB,EAASiB,UACxBvB,QAAQC,IAAI,eACZD,QAAQC,IAAI,GAAGqB,EAAK,OAAOA,EAAK,MAIpC,IAEI,MAAMpB,QAAiBsB,MAAM,wFAAqD,CAC9EC,OAAQ,OACRC,QAAS,CACL,cAAiB,UAAYtB,GAEjCuB,KAAMrB,IAIJsB,QAAa1B,EAAS2B,OAG5B,OAAI3B,EAAS4B,GACFF,GAIP5B,QAAQ+B,MAAM,uCAAwCH,EAAKI,SAAW,iBAC/D,KAEf,CAAE,MAAOD,GAGL,OADA/B,QAAQ+B,MAAM,yBAA0BA,IACjC,CACX,CACJ,CAcuCE,CAAwB/B,GACnDF,QAAQC,IAAIE,EAAa,IAIjC,IAAA+B,cAAa,WAAY9C,EAE7B,C","sources":["webpack://worldify/./src/modules/pages/app/Visa/visa_finder.js"],"sourcesContent":["import { createWidget } from '@typeform/embed';\nimport '@typeform/embed/build/css/widget.css';\nimport { get_tf_result } from '../../../utils';\nimport { getCookie } from '../../../auth';\n\nasync function submit_health_insurance(response) {\n\n    const token = getCookie('wized_token');\n    const formData = new FormData ();\n\n    formData.append('has_taken_quiz',1);\n\n    response.variables.forEach(variable => {\n        if (variable.key === \"expat_insurance\") {\n            formData.append('needs_expat_insurance',variable.number);\n        } else if (variable.key === \"private_insurance\") {\n            formData.append('needs_public_health_insurance',variable.number);\n        } else if (variable.key === \"public_insurance\") {\n            formData.append('needs_private_health_insurance',variable.number);\n        } \n    })\n\n    response.answers.forEach(answer => {\n        console.log(answer.field.ref, answer.text);\n        switch (answer.field.ref) {\n            case 'answer_citizenship': \n                formData.append('citizenship',answer.text);\n                break;\n            case 'answer_citizenship_2': \n                formData.append('citizenship_2',answer.text);\n                break;\n            case 'answer_birth_date': \n                formData.append('birth_date',answer.date);\n                break;\n            case 'answer_country_residence': \n                formData.append('residence_country',answer.text);\n                break;\n            case 'answer_relocation_date': \n                formData.append('relocation_date',answer.date);\n                break;\n            case 'answer_relocation_date_2': \n                formData.append('relocation_date',answer.date);\n                break;\n            case 'answer_health_insurance_status': \n                if (answer.choice.label ==='No') {\n                    formData.append('health_insurance_status','not_insured');\n                } else if (answer.choice.label ==='Only on Expat or Travel Insurance') {\n                    //handle expat and travel insurance                \n                }\n                \n                break;\n            case 'answer_current_health_insurance': \n                if (answer.choice.label ==='Public Insurance from an EU/EAA country (not Germany)') {\n                    formData.append('health_insurance_status','public_insurnace_not_germany');\n                } else if (answer.choice.label ==='Public Insurance from Germany') {\n                    formData.append('health_insurance_status','public_insurance_germany');\n                } else if (answer.choice.label ==='Private Insurance from an EU/EAA country (not Germany)') {\n                    formData.append('health_insurance_status','private_insurance_not_germany');              \n                } else if (answer.choice.label ==='Private Insurance from Germany') {\n                    formData.append('health_insurance_status','private_insurance_germany');              \n                }\n                break;\n            case 'answer_occupation': \n                //formData.append('birth_date',answer.choice.label);\n                break;\n            case 'answer_student_status': \n                if (answer.choice.label ===\"I'm a German university student\") {\n                    formData.append('student_status','german_university_student');\n                } else if (answer.choice.label ===\"I'm here on a language study program\") {\n                    formData.append('student_status','language_study_program');\n                } else if (answer.choice.label ===\"I'm another kind of student\") {\n                    formData.append('student_status','other');              \n                }\n                break;\n            case 'answer_unemployment_status': \n                //formData.append('birth_date',answer.choice.label);\n                break;\n            case 'answer_annual_income': \n                //formData.append('birth_date',answer.choice.label);\n                break;\n            case 'answer_annual_income_2': \n                //formData.append('birth_date',answer.number);\n                break;\n            default:\n                break;\n        }\n    });\n\n    for (const pair of formData.entries()) {\n        console.log('Form Data: ');\n        console.log(`${pair[0]}, ${pair[1]}`);\n      }\n\n\n    try {\n        // Make a GET request to the authentication endpoint with the token in the headers.\n        const response = await fetch(BASE_URL + '/typeform_submissions/health-insurance', {\n            method: 'POST',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            body: formData\n        });\n        \n        // Parse the response to JSON.\n        const data = await response.json();\n\n        // Check if the response status indicates success (e.g., 200 OK).\n        if (response.ok) {\n            return data;\n        } else {\n            // Log an error message if the token verification failed. \n            // Use the provided error message from the response or a default \"Unknown error\" message.\n            console.error('Retrival of Typform Response failed:', data.message || 'Unknown error');\n            return null;\n        }\n    } catch (error) {\n        // Log any errors that occurred during the token verification process.\n        console.error('Error verifying token:', error);\n        return false;\n    }\n}\n\nexport function render () {\n\n    const options = {\n        container: document.querySelector('[w-el=\"typeform_quiz\"]'), \n        hideHeaders: true,\n        hideFooter: true,\n        opacity: 0,\n        height : 600,\n        onSubmit: async ({ formId, responseId }) =>  {\n            console.log(`Form ${formId} submitted, response id: ${responseId}`)\n            const response = await get_tf_result(formId,responseId);\n            console.log(response);\n            const updated_user = await submit_health_insurance(response);\n            console.log(updated_user);\n          },\n    }\n\n    createWidget('Qj9yA3Z7', options)\n\n}\n\n"],"names":["render","options","container","document","querySelector","hideHeaders","hideFooter","opacity","height","onSubmit","async","formId","responseId","console","log","response","updated_user","token","getCookie","formData","FormData","append","variables","forEach","variable","key","number","answers","answer","field","ref","text","date","choice","label","pair","entries","fetch","method","headers","body","data","json","ok","error","message","submit_health_insurance","createWidget"],"sourceRoot":""}