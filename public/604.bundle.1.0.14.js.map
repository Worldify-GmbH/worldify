{"version":3,"file":"604.bundle.1.0.14.js","mappings":"8JASO,SAASA,IAEZ,KACI,QAAU,cAAe,KAAM,KAAMC,EAAyBC,EAAsBC,GAAqB,EAC7G,CAAE,MAAOC,GACL,KAAQA,MAAM,CACVC,QAAS,mCAAqCD,EAAMC,QACpDC,UAAW,8BACXC,MAAO,CAAC,GAEhB,CACJ,CAQA,SAASN,EAAwBO,GAC7B,MAAMC,EAAkB,IAAIC,SAI5B,OAHAD,EAAgBE,OAAO,QAASH,EAASI,IAAI,iBAC7CH,EAAgBE,OAAO,WAAYH,EAASI,IAAI,oBAChDH,EAAgBE,OAAO,kBAAmBH,EAASI,IAAI,2BAChDH,CACX,CAQAI,eAAeX,EAAqBY,GAChC,MAAMC,EAAQD,EAAcF,IAAI,SAC1BI,EAAWF,EAAcF,IAAI,YAC7BK,EAAkBH,EAAcF,IAAI,mBAG1C,IAAKG,IAAUC,IAAaC,EACxB,MAAO,CAAEC,SAAS,EAAOb,QAAS,2DAGtC,GAAIW,EAASG,OAAS,GAAKH,EAASG,OAAS,GACzC,MAAO,CAACD,SAAS,EAAOb,QAAS,yDAGrC,IAAK,QAAQe,KAAKJ,GACd,MAAO,CAACE,SAAS,EAAOb,QAAS,gEAGrC,IAAK,QAAQe,KAAKJ,GACd,MAAO,CAACE,SAAS,EAAOb,QAAS,gEAGrC,IAAK,QAAQe,KAAKJ,GACd,MAAO,CAACE,SAAS,EAAOb,QAAS,sDAGrC,IAAK,yBAAyBe,KAAKJ,GAC/B,MAAO,CAACE,SAAS,EAAOb,QAAS,iEAGrC,GAAIW,IAAaC,EACb,MAAO,CAACC,SAAS,EAAOb,QAAS,+BAGrC,MAAMG,EAAW,IAAIE,SACrBF,EAASG,OAAO,QAAQG,EAAcF,IAAI,UAC1CJ,EAASG,OAAO,WAAWG,EAAcF,IAAI,aAE7C,IACI,MAAMS,QAAiBC,MAAM,8DAA2B,CACpDC,OAAQ,OACRC,KAAMhB,EACNiB,QAAS,CAAC,IAGRC,QAAaL,EAASM,OAG5B,GAAIN,EAASO,GAMT,OALA,KAAQC,KAAK,CACTxB,QAAS,4BACTC,UAAW,iBACXC,MAAO,CAAC,IAEL,CAAEW,SAAS,EAAMb,QAAS,qBAAsByB,UAAWJ,EAAKI,WACpE,CACH,MAAMC,EAAeL,EAAKrB,SAAW,qCAMrC,OALA,KAAQD,MAAM,CACVC,QAAS,0BAA0B0B,IACnCzB,UAAW,gBACXC,MAAO,CAAqB,IAEzB,CAAEW,SAAS,EAAOb,QAAS0B,EACtC,CACJ,CAAE,MAAO3B,GAML,OALA,KAAQA,MAAM,CACVC,QAAS,gCAAkCD,EAAMC,QACjDC,UAAW,uBACXC,MAAO,CAAC,IAEL,CAAEW,SAAS,EAAOb,QAASD,EAAMC,SAAW,2CACvD,CACJ,CAOAQ,eAAeV,EAAqBkB,GAChC,MAAMW,EAAcC,SAASC,eAAe,eACtCC,EAAaH,EAAcA,EAAYI,WAAWC,cAAc,yBAA2B,KAEjG,GAAIhB,EAASH,QACT,KACI,IAAAoB,WAAU,EAAAC,UAAWlB,EAASS,WAC1BE,GAAeG,IACfH,EAAYQ,UAAUC,IAAI,QAC1BN,EAAWO,MAAMC,QAAU,SAG/B,MAAMC,QAAqB,IAAAC,uBACvBD,EAAa1B,cACP,IAAA4B,sBAAqBF,EAAaG,KAAKhC,MAAO,qBAAsB,kDAE1E,KAAQiC,QAAQ,CACZ3C,QAAS,2CACTC,UAAW,gCACXC,MAAO,CAAmB,GAGtC,CAAE,MAAOH,GACL,KAAQA,MAAM,CACVC,QAAS,+BAAiCD,EAAMC,QAChDC,UAAW,4BACXC,MAAO,CAAC,GAEhB,MAEA,KAAQyC,QAAQ,CACZ3C,QAAS,kBAAoBgB,EAAShB,QACtCC,UAAW,qBACXC,MAAO,CAAe,GAGlC,C","sources":["webpack://worldify/./src/modules/pages/account/signup.js"],"sourcesContent":["import { setCookie ,TOKEN_KEY, sendVerificationMail, checkAuthentication } from \"../../auth\";\nimport { setupForm } from \"../../form_handling\";\nimport { logging } from \"../../utils\";\n\n\n/**\n * Renders and sets up the signup functionality.\n * This function is called to initialize the signup page.\n */\nexport function render() {\n\n    try {\n        setupForm('signup_form', null, null, transformSignupFormData, submitSignupFormData, handleSignupResponse,false);\n    } catch (error) {\n        logging.error({\n            message: \"Error initializing signup form: \" + error.message,\n            eventName: \"signup_initialization_error\",\n            extra: {}\n        });\n    }\n}\n\n/**\n * Transforms the signup form data for submission.\n * \n * @param {FormData} formData - The original form data.\n * @returns {FormData} - The transformed form data.\n */\nfunction transformSignupFormData(formData) {\n    const transformedData = new FormData();\n    transformedData.append('email', formData.get('signup_email'));\n    transformedData.append('password', formData.get('signup_password'));\n    transformedData.append('confirmPassword', formData.get('signup_confirmPassword'));\n    return transformedData;\n}\n\n/**\n * Submits the signup form data to the server.\n * \n * @param {FormData} formData - The transformed form data.\n * @returns {Promise<Object>} - The response data from the server.\n */\nasync function submitSignupFormData(inputFormData) {\n    const email = inputFormData.get('email');\n    const password = inputFormData.get('password');\n    const confirmPassword = inputFormData.get('confirmPassword');\n\n    // Validate email and passwords\n    if (!email || !password || !confirmPassword) {\n        return { success: false, message: 'Email, password and password confirmation are required.' };\n    }\n    // Check for password length (between 7 and 30 characters)\n    if (password.length < 7 || password.length > 30){\n        return {success: false, message: 'The password needs to be between 7 and 30 characters.'}\n    } \n    // Check for at least one uppercase letter\n    if (!/[A-Z]/.test(password)) {\n        return {success: false, message: 'The password needs to contain at least one uppercase letter.'}\n    }\n    // Check for at least one lowercase letter\n    if (!/[a-z]/.test(password)) {\n        return {success: false, message: 'The password needs to contain at least one lowercase letter.'}\n    }\n    // Check for at least one number\n    if (!/[0-9]/.test(password)) {\n        return {success: false, message: 'The password needs to contain at least one number.'}\n    }\n    // Check for at least one special character\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n        return {success: false, message: 'The password needs to contain at least one special character.'}\n    }\n    // Check if both passwords match\n    if (password !== confirmPassword) {\n        return {success: false, message: 'The passwords do not match.'}\n    }\n\n    const formData = new FormData();\n    formData.append('email',inputFormData.get('email'));\n    formData.append('password',inputFormData.get('password'))\n\n    try {\n        const response = await fetch(`${AUTH_URL}/auth/signup`, {\n            method: 'POST',\n            body: formData,\n            headers: {}\n        });\n\n        const data = await response.json();\n\n        // Check the response status\n        if (response.ok) {\n            logging.info({\n                message: \"Signup request successful\",\n                eventName: \"signup_success\",\n                extra: {}\n            });\n            return { success: true, message: \"Signup successful.\", authToken: data.authToken };\n        } else {\n            const errorMessage = data.message || 'Signup failed due to unknown error';\n            logging.error({\n                message: `Signup request failed: ${errorMessage}`,\n                eventName: \"signup_failed\",\n                extra: { /*response: data*/ }\n            });\n            return { success: false, message: errorMessage };\n        }\n    } catch (error) {\n        logging.error({\n            message: \"Error during signup process: \" + error.message,\n            eventName: \"signup_process_error\",\n            extra: {}\n        });\n        return { success: false, message: error.message || \"Error occurred during the signup process\" };\n    }\n}\n\n/**\n * Handles the response received after signup form submission.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleSignupResponse(response) {\n    const formElement = document.getElementById('signup_form');\n    const successDiv = formElement ? formElement.parentNode.querySelector('[w-el=\"form_success\"]') : null;\n\n    if (response.success) {\n        try {\n            setCookie(TOKEN_KEY, response.authToken);\n            if (formElement && successDiv) {\n                formElement.classList.add('hide');\n                successDiv.style.display = 'block';\n            }\n\n            const authResponse = await checkAuthentication();\n            if (authResponse.success) {\n                await sendVerificationMail(authResponse.user.email, \"email_verification\", DOMAIN_URL + \"/account/onboarding\");\n            } else {\n                logging.warning({\n                    message: \"Authentication check failed after signup\",\n                    eventName: \"post_signup_auth_check_failed\",\n                    extra: { /*authResponse*/ }\n                });\n            }\n        } catch (error) {\n            logging.error({\n                message: \"Error in post-signup actions\" + error.message,\n                eventName: \"post_signup_actions_error\",\n                extra: {}\n            });\n        }\n    } else {\n        logging.warning({\n            message: \"Signup failed: \" + response.message,\n            eventName: \"user_signup_failed\",\n            extra: { /*response*/ }\n        });\n    }\n}"],"names":["render","transformSignupFormData","submitSignupFormData","handleSignupResponse","error","message","eventName","extra","formData","transformedData","FormData","append","get","async","inputFormData","email","password","confirmPassword","success","length","test","response","fetch","method","body","headers","data","json","ok","info","authToken","errorMessage","formElement","document","getElementById","successDiv","parentNode","querySelector","setCookie","TOKEN_KEY","classList","add","style","display","authResponse","checkAuthentication","sendVerificationMail","user","warning"],"sourceRoot":""}