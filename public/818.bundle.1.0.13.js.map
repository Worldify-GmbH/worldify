{"version":3,"file":"818.bundle.1.0.13.js","mappings":"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","sources":["webpack://worldify/./src/modules/pages/account/onboarding.js"],"sourcesContent":["import { getCookie, getQueryParam, checkAuthentication, redirectResendEmailVerification} from \"../../auth\";\nimport { setupForm } from \"../../form_handling\";\nimport { attachDatePicker, logging } from \"../../utils\";\n\n/**\n * Renders the page and initializes functionality.\n * This function handles the verification process and sets up onboarding forms.\n */\nexport async function render() {\n    const successBanner = document.querySelector('[w-el=\"verification_success\"]');\n    const failedBanner = document.querySelector('[w-el=\"verification_failed\"]');\n    const failedText = failedBanner.querySelector('[w-el=\"verificationFailed_text\"]');\n    attachDatePicker();\n\n    // Check if user is already verified\n    try {\n        const authResponse = await checkAuthentication();\n\n        if (authResponse.success && !authResponse.user.is_verified) {\n            const magicToken = getQueryParam('token');\n            const formData = new FormData();\n            formData.append('magic_token', magicToken);\n\n            try {\n                const response = await fetch(`${AUTH_URL}/auth/magic-login`, {\n                    method: 'POST',\n                    body: formData\n                });\n\n                const data = await response.json();\n\n                if (response.ok) {\n                    const authCheckResponse = await checkAuthentication();\n\n                    if (authCheckResponse.user.is_verified) {\n                        successBanner.classList.remove('hide');\n                        setTimeout(() => successBanner.classList.add('hide'), 10000);\n                    } else {\n                        failedText.textContent = \"Email Verification failed. \"+ data.message +\". You will be redirected to the Resend Email Verification Link page shortly to try again.\";\n                        failedBanner.classList.remove('hide');\n                        // Log a warning about the failed email verification\n                        logging.warning({\n                            message: `Email verification failed (${user.email}): ${data.message}. Redirecting to Resend Email Verification Link page.`,\n                            eventName: \"email_verification_failed\"\n                        });\n                        setTimeout(() => {\n                            redirectResendEmailVerification();\n                            failedBanner.classList.add('hide');\n                        }, 10000);\n                    }\n                } else {\n                    failedText.textContent = \"Email Verification failed. \"+ data.message +\". You will be redirected to the Resend Email Verification Link page shortly to try again.\";\n                    failedBanner.classList.remove('hide');\n                    // Log a warning about the failed email verification\n                    logging.warning({\n                        message: `Email verification failed (${user.email}): ${data.message}. Redirecting to Resend Email Verification Link page.`,\n                        eventName: \"email_verification_failed\"\n                    });\n                    setTimeout(() => {\n                        redirectResendEmailVerification();\n                        failedBanner.classList.add('hide');\n                    }, 10000);\n                }\n            } catch (error) {\n                logging.error({\n                    message: `Error with magic login: ${error.message}`,\n                    eventName: \"magic_login_error\",\n                    extra: { /*errorDetails: error.message*/ }\n                });\n            }\n        }\n    } catch (error) {\n        logging.error({\n            message: `Authentication check failed: ${error.message}`,\n            eventName: \"auth_check_failure\",\n            extra: { /*errorDetails: error.message*/ }\n        });\n    }\n\n    // Setup onboarding forms\n    setupForm('onboarding_form_1', transformOnboardingFormData, submitOnboardingFormData, handleOnboardingResponse1, false);\n    setupForm('onboarding_form_2', transformOnboardingFormData, submitOnboardingFormData, handleOnboardingResponse2, false);\n}\n\n/**\n * Transforms the onboarding form data for submission.\n * This function iterates over the provided FormData object, adjusts the keys for nested objects,\n * and constructs a new FormData object with the transformed data.\n * \n * @param {FormData} formData - The original form data from the onboarding form.\n * @returns {FormData} - The transformed FormData object.\n */\nfunction transformOnboardingFormData(formData) {\n\n    const transformedData = new FormData();\n\n    for (const [key, value] of formData.entries()) {\n        // Remove prefix and handle nested object naming\n        const fieldName = key.split(\"_\").slice(1).join(\"_\");\n\n        // Splitting the key based on '__' to handle nested objects\n        const parts = fieldName.split('__');\n\n        // Determine if the form field is nested and append data accordingly\n        if (parts.length === 2) {\n            const [objectName, objectKey] = parts;\n            transformedData.append(`${objectName}[${objectKey}]`, value);\n        } else {\n            transformedData.append(fieldName, value);\n        }\n    }\n\n    return transformedData;\n}\n\n/**\n * Submits the onboarding form data to the server.\n * This function sends a POST request with the onboarding data and handles the server's response.\n *\n * @param {FormData} inputFormData - The transformed form data for onboarding.\n * @returns {Promise<Object>} - The response object from the server, indicating success or failure.\n */\nasync function submitOnboardingFormData(inputFormData) {\n    // Retrieve the authentication token from cookies\n    const token = getCookie(\"wized_token\");\n\n    try {\n        // Send a POST request to the server with the onboarding data\n        const response = await fetch(`${BASE_URL}/onboarding`, {\n            method: 'POST',\n            headers: { 'Authorization': `Bearer ${token}` },\n            body: inputFormData,\n        });\n\n        // Parse the JSON response from the server\n        const data = await response.json();\n\n        // Check if the response status is OK (successful)\n        if (response.ok) {\n            // Log successful submission and return a success message\n            logging.info({\n                message: \"Onboarding form submission successful\",\n                eventName: \"onboarding_submission_success\",\n                extra: {}\n            });\n            return { success: true, message: \"Submitting onboarding information was successful.\" };\n        } else {\n            // Log failed submission and return an error message\n            const errorMessage = data.message || 'Onboarding submission failed due to an unknown error';\n            logging.error({\n                message: `Onboarding form submission failed: ${errorMessage}`,\n                eventName: \"onboarding_submission_failed\",\n                extra: {}\n            });\n            return { success: false, message: errorMessage };\n        }\n    } catch (error) {\n        // Log any exceptions that occur during the submission process\n        logging.error({\n            message: `Error during onboarding form submission process: ${error.message}`,\n            eventName: \"onboarding_submission_process_error\",\n            extra: {}\n        });\n        return { success: false, message: error.message || \"Error occurred during the onboarding submission process\" };\n    }\n}\n\n/**\n * Handles the response received after the first onboarding form submission.\n * This function is responsible for hiding the current form and showing the next form \n * in the onboarding process based on the response received.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleOnboardingResponse1(response) {\n    // Access the parent elements of the onboarding forms\n    const formElement = document.getElementById('onboarding_form_1').parentElement;\n    const nextFormElement = document.getElementById('onboarding_form_2').parentElement;\n\n    // Ensure both elements are found before manipulating their classes\n    if (formElement && nextFormElement) {\n        // Hide the current form and display the next form\n        formElement.classList.add('hide');\n        nextFormElement.classList.remove('hide');\n    }\n}\n\n\n/**\n * Handles the response received after the second onboarding form submission.\n * This function is responsible for hiding the current form and showing the next section,\n * which is the pricing information, based on the response received.\n * \n * @param {Object} response - The response object received from the form submission.\n */\nasync function handleOnboardingResponse2(response) {\n    // Access the parent element of the current onboarding form and the pricing section element\n    const formElement = document.getElementById('onboarding_form_2').parentElement;\n    const nextFormElement = document.getElementById('onboarding_pricing');\n\n    // Ensure both elements are found before manipulating their classes\n    if (formElement && nextFormElement) {\n        // Hide the current form and display the pricing section\n        formElement.classList.add('hide');\n        nextFormElement.classList.remove('hide');\n    }\n}\n"],"names":["async","render","successBanner","document","querySelector","failedBanner","failedText","authResponse","checkAuthentication","success","user","is_verified","magicToken","getQueryParam","formData","FormData","append","response","fetch","method","body","data","json","ok","classList","remove","setTimeout","add","textContent","message","warning","email","eventName","redirectResendEmailVerification","error","extra","transformOnboardingFormData","submitOnboardingFormData","handleOnboardingResponse1","handleOnboardingResponse2","transformedData","key","value","entries","fieldName","split","slice","join","parts","length","objectName","objectKey","inputFormData","token","getCookie","headers","info","errorMessage","formElement","getElementById","parentElement","nextFormElement"],"sourceRoot":""}